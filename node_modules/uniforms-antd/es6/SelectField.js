import CheckboxGroup from 'antd/lib/checkbox/Group';
import RadioGroup from 'antd/lib/radio/group';
import SelectAntD from 'antd/lib/select';
import React from 'react';
import { connectField, filterDOMProps } from 'uniforms';
import wrapField from './wrapField';
function Select(props) {
    var _a;
    const Group = props.fieldType === Array ? CheckboxGroup : RadioGroup;
    return wrapField(props, props.checkboxes ? (
    // @ts-expect-error: Incorrect `value` type.
    React.createElement(Group, Object.assign({ disabled: props.disabled, name: props.name, onChange: (eventOrValue) => {
            if (!props.readOnly) {
                props.onChange(
                // FIXME: Argument type depends on `props.fieldType`.
                props.fieldType === Array
                    ? eventOrValue
                    : eventOrValue.target.value);
            }
        }, options: props.allowedValues.map(value => {
            var _a;
            return ({
                disabled: (_a = props.disableItem) === null || _a === void 0 ? void 0 : _a.call(props, value),
                label: props.transform ? props.transform(value) : value,
                value,
            });
        }), value: props.value }, filterDOMProps(props)))) : (React.createElement(SelectAntD, Object.assign({ allowClear: !props.required, disabled: props.disabled, mode: props.fieldType === Array ? 'multiple' : undefined, name: props.name, onChange: value => {
            if (!props.readOnly) {
                props.onChange(value);
            }
        }, placeholder: props.placeholder, 
        // @ts-expect-error: Incorrect `inputRef` type.
        ref: props.inputRef, value: props.fieldType === Array
            ? Array.isArray(props.value)
                ? props.value.filter(value => value !== undefined)
                : []
            : props.value }, filterDOMProps(props)), (_a = props.allowedValues) === null || _a === void 0 ? void 0 : _a.map(value => {
        var _a;
        return (React.createElement(SelectAntD.Option, { disabled: (_a = props.disableItem) === null || _a === void 0 ? void 0 : _a.call(props, value), key: value, value: value }, props.transform ? props.transform(value) : value));
    }))));
}
export default connectField(Select, { kind: 'leaf' });
