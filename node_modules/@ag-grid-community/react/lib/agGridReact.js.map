{"version":3,"sources":["agGridReact.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,+BAA6C;AAC7C,sCAAwC;AACxC,gDAWiC;AACjC,+CAA4C;AAC5C,mDAAgD;AAChD,mEAA6F;AAU7F;IAAiC,+BAA+B;IAkB5D,qBAAmB,KAAU,EAAS,KAAU;QAAhD,YACI,kBAAM,KAAK,EAAE,KAAK,CAAC,SACtB;QAFkB,WAAK,GAAL,KAAK,CAAK;QAAS,WAAK,GAAL,KAAK,CAAK;QAbhD,4BAAsB,GAAG,IAAI,+CAAsB,EAAE,CAAC;QAEtD,SAAG,GAAmB,IAAI,CAAC;QAE3B,aAAO,GAAkB,EAAE,CAAC;QAC5B,4BAAsB,GAAG,KAAK,CAAC;QAE/B,eAAS,GAAG,KAAK,CAAC;;IAQlB,CAAC;IAED,4BAAM,GAAN;QAAA,iBAOC;QANG,OAAO,KAAK,CAAC,aAAa,CAAM,KAAK,EAAE;YACnC,KAAK,EAAE,IAAI,CAAC,iBAAiB,EAAE;YAC/B,GAAG,EAAE,UAAC,CAAc;gBAChB,KAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;YACtB,CAAC;SACJ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACrB,CAAC;IAED,uCAAiB,GAAjB;QACI,IAAM,KAAK,GAAQ,EAAC,MAAM,EAAE,MAAM,EAAC,CAAC;QACpC,gCAAgC;QAChC,IAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;QACjD,IAAI,cAAc,EAAE;YAChB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gBACnC,KAAK,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;SACN;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,uCAAiB,GAAjB;QACI,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC;QACzC,IAAM,UAAU,GAAG;YACf,qBAAqB,EAAE;gBACnB,WAAW,EAAE,IAAI;gBACjB,yBAAyB,EAAE,IAAI,8BAA8B,CAAC,IAAI,CAAC;aACtE;YACD,OAAO,SAAA;SACV,CAAC;QAEF,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC;QAC/C,IAAI,2BAAY,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC1C,WAAW,CAAC,UAAU,GAAG,2BAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxE;QAED,IAAI,CAAC,WAAW,GAAG,oBAAa,CAAC,2BAA2B,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAEtF,8BAA8B;QAC9B,IAAI,WAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAEtD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,GAAI,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,SAAU,CAAC;IACjD,CAAC;IAED,qCAAe,GAAf,UAAgB,cAA8B,EAAE,OAA6B,EAAE,WAAe;QAA9F,iBAgBC;QAhB8E,4BAAA,EAAA,eAAe;QAC1F,8DAA8D;QAC9D,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,OAAO,CAAC,IAAI,CAAC,CAAC;YACd,OAAO;SACV;QAED,IAAI,cAAc,CAAC,QAAQ,EAAE,EAAE;YAC3B,OAAO,CAAC,IAAI,CAAC,CAAC;SACjB;aAAM;YACH,IAAI,WAAW,IAAI,WAAW,CAAC,2BAA2B,EAAE;gBACxD,OAAO,CAAC,KAAK,CAAC,+BAA6B,cAAc,CAAC,qBAAqB,EAAE,6BAAwB,WAAW,CAAC,2BAA2B,OAAI,CAAC,CAAC;gBACtJ,OAAO;aACV;YACD,MAAM,CAAC,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,cAAc,EAAE,OAAO,EAAE,WAAW,GAAG,CAAC,CAAC,EAA9D,CAA8D,EAAE,CAAC,CAAC,CAAC;SAC9F;IACL,CAAC;IAED;;;;OAIG;IACH,sCAAgB,GAAhB,UAAiB,MAAmB,EAAE,cAA8B,EAAE,OAA6B;QAC/F,IAAI,CAAC,OAAO,kBAAO,IAAI,CAAC,OAAO,GAAE,MAAM,EAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IACpE,CAAC;IAED,iCAAW,GAAX,UAAY,QAAc;QAA1B,iBAaC;QAZG,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC7B,OAAO,QAAQ,IAAI,QAAQ,EAAE,CAAC;SACjC;QACD,UAAU,CAAC;YACP,IAAI,KAAI,CAAC,GAAG,EAAE,EAAE,aAAa;gBACzB,KAAI,CAAC,WAAW,CAAC;oBACb,QAAQ,IAAI,QAAQ,EAAE,CAAC;oBACvB,KAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;gBACxC,CAAC,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;IACvC,CAAC;IAGD,mCAAa,GAAb,UAAc,MAAmB;QAC7B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,KAAK,MAAM,EAApB,CAAoB,CAAC,CAAC;QACtE,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAEO,4CAAsB,GAA9B,UAA+B,OAAe;QAC1C,IAAI,OAAO,KAAK,SAAS,EAAE;YACvB,2DAA2D;YAC3D,kEAAkE;YAClE,yEAAyE;YACzE,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,8BAA8B,EAAE;gBAC7C,OAAO,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC;aACpD;iBAAM,IAAI,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE;gBACtE,OAAO,oDAA2B,CAAC,aAAa,CAAC;aACpD;SACJ;QAED,6DAA6D;QAC7D,OAAO,oDAA2B,CAAC,cAAc,CAAC;IACtD,CAAC;IAED,2CAAqB,GAArB,UAAsB,SAAc;QAChC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QAEhD,4EAA4E;QAC5E,6EAA6E;QAC7E,oBAAoB;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,wCAAkB,GAAlB,UAAmB,SAAc;QAC7B,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;IAED,yCAAmB,GAAnB,UAAoB,SAAc,EAAE,SAAc;QAC9C,IAAM,OAAO,GAAQ,EAAE,CAAC;QAExB,IAAI,CAAC,0BAA0B,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QAC/D,IAAI,CAAC,+BAA+B,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAEzD,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,oBAAa,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,GAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SACvF;IACL,CAAC;IAEO,qDAA+B,GAAvC,UAAwC,SAAc,EAAE,OAAY;QAChE,IAAI,YAAY,GAAG,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC;QAErC,IAAI,2BAAY,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE;YACzC,IAAM,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,oDAA2B,CAAC,cAAc,CAAC,CAAC;YAE9G,IAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;YACnD,IAAM,UAAU,GAAG,2BAAY,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YAC9D,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,cAAc,EAAE,UAAU,CAAC,EAAE;gBACzD,IAAI,YAAY,EAAE;oBACd,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;iBAC3D;gBAED,OAAO,CAAC,YAAY,CAAC;oBACjB;wBACI,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;wBAC1C,YAAY,EAAE,2BAAY,CAAC,kBAAkB,CAAC,SAAS,CAAC;qBAC3D,CAAA;aACR;SACJ;IACL,CAAC;IAEO,gDAA0B,GAAlC,UAAmC,SAAc,EAAE,SAAc,EAAE,OAAY;QAA/E,iBA8BC;QA7BG,IAAI,YAAY,GAAG,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC;QAErC,IAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC3C,WAAW,CAAC,OAAO,CAAC,UAAC,OAAO;YACxB,IAAI,oBAAa,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;gBACtD,IAAM,uBAAuB,GAAG,KAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,KAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC9G,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE;oBAC3E,IAAI,YAAY,EAAE;wBACd,OAAO,CAAC,GAAG,CAAC,mBAAiB,OAAO,uBAAoB,CAAC,CAAC;qBAC7D;oBAED,OAAO,CAAC,OAAO,CAAC,GAAG;wBACf,aAAa,EAAE,SAAS,CAAC,OAAO,CAAC;wBACjC,YAAY,EAAE,SAAS,CAAC,OAAO,CAAC;qBACnC,CAAC;iBACL;aACJ;QACL,CAAC,CAAC,CAAC;QACH,oBAAa,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,UAAC,QAAgB;YACvD,IAAI,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,SAAS,CAAC,QAAQ,CAAC,EAAE;gBAC9C,IAAI,YAAY,EAAE;oBACd,OAAO,CAAC,GAAG,CAAC,mBAAiB,QAAQ,6BAA0B,CAAC,CAAC;iBACpE;gBACD,OAAO,CAAC,QAAQ,CAAC,GAAG;oBAChB,aAAa,EAAE,SAAS,CAAC,QAAQ,CAAC;oBAClC,YAAY,EAAE,SAAS,CAAC,QAAQ,CAAC;iBACpC,CAAC;aACL;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0CAAoB,GAApB;QACI,IAAI,IAAI,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;YACnB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;SACnB;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC;IAEM,2CAAqB,GAA5B;QACI,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC;IAC5C,CAAC;IA5Mc,uCAA2B,GAAW,IAAI,CAAC,CAAC,iEAAiE;IA6MhI,kBAAC;CA7ND,AA6NC,CA7NgC,iBAAS,GA6NzC;AA7NY,kCAAW;AA+NxB,WAAW,CAAC,SAAS,GAAG;IACpB,WAAW,EAAE,SAAS,CAAC,MAAM;CAChC,CAAC;AAEF,aAAa,CAAC,oBAAa,CAAC,iBAAiB,EAAE,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;AACjE,aAAa,CAAC,oBAAa,CAAC,kBAAkB,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;AAChE,aAAa,CAAC,oBAAa,CAAC,iBAAiB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;AACjE,aAAa,CAAC,oBAAa,CAAC,iBAAiB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;AACjE,aAAa,CAAC,oBAAa,CAAC,gBAAgB,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;AAC/D,aAAa,CAAC,oBAAa,CAAC,iBAAiB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;AACjE,aAAa,CAAC,oBAAa,CAAC,mBAAmB,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;AAEjE,SAAS,aAAa,CAAC,WAAqB,EAAE,QAAa;IACvD,WAAW,CAAC,OAAO,CAAC,UAAC,OAAe;QAC/B,WAAmB,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC;IAC7C,CAAC,CAAC,CAAC;AACP,CAAC;AAED;IAA6C,kDAAuC;IAIhF,wCAAY,WAAwB;QAApC,YACI,iBAAO,SAEV;QADG,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;;IACnC,CAAC;IAED,sDAAa,GAAb,UAAc,kBAAkC,EAAE,aAA4B;QAC1E,OAAO,IAAI,+BAAc,CAAC,kBAAkB,EAAE,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IACnF,CAAC;IACL,qCAAC;AAAD,CAZA,AAYC,CAZ4C,2BAAoB,GAYhE","file":"agGridReact.js","sourcesContent":["import * as React from \"react\";\nimport {Component, ReactPortal} from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport {\n    BaseComponentWrapper,\n    ColumnApi,\n    ComponentUtil,\n    ComponentType,\n    FrameworkComponentWrapper,\n    Grid,\n    GridApi,\n    GridOptions,\n    Module,\n    WrapableInterface\n} from \"@ag-grid-community/core\";\nimport {AgGridColumn} from \"./agGridColumn\";\nimport {ReactComponent} from \"./reactComponent\";\nimport {ChangeDetectionService, ChangeDetectionStrategyType} from \"./changeDetectionService\";\n\nexport interface AgGridReactProps extends GridOptions {\n    gridOptions?: GridOptions;\n    modules?: Module[];\n    rowDataChangeDetectionStrategy?: ChangeDetectionStrategyType;\n    componentWrappingElement?: string;\n    disableStaticMarkup?: boolean;\n}\n\nexport class AgGridReact extends Component<AgGridReactProps, {}> {\n    static propTypes: any;\n\n    gridOptions!: GridOptions;\n\n    changeDetectionService = new ChangeDetectionService();\n\n    api: GridApi | null = null;\n    columnApi!: ColumnApi;\n    portals: ReactPortal[] = [];\n    hasPendingPortalUpdate = false;\n\n    destroyed = false;\n\n    protected eGridDiv!: HTMLElement;\n\n    private static MAX_COMPONENT_CREATION_TIME: number = 1000; // a second should be more than enough to instantiate a component\n\n    constructor(public props: any, public state: any) {\n        super(props, state);\n    }\n\n    render() {\n        return React.createElement<any>(\"div\", {\n            style: this.createStyleForDiv(),\n            ref: (e: HTMLElement) => {\n                this.eGridDiv = e;\n            }\n        }, this.portals);\n    }\n\n    createStyleForDiv() {\n        const style: any = {height: \"100%\"};\n        // allow user to override styles\n        const containerStyle = this.props.containerStyle;\n        if (containerStyle) {\n            Object.keys(containerStyle).forEach(key => {\n                style[key] = containerStyle[key];\n            });\n        }\n        return style;\n    }\n\n    componentDidMount() {\n        const modules = this.props.modules || [];\n        const gridParams = {\n            providedBeanInstances: {\n                agGridReact: this,\n                frameworkComponentWrapper: new ReactFrameworkComponentWrapper(this)\n            },\n            modules\n        };\n\n        let gridOptions = this.props.gridOptions || {};\n        if (AgGridColumn.hasChildColumns(this.props)) {\n            gridOptions.columnDefs = AgGridColumn.mapChildColumnDefs(this.props);\n        }\n\n        this.gridOptions = ComponentUtil.copyAttributesToGridOptions(gridOptions, this.props);\n\n        // don't need the return value\n        new Grid(this.eGridDiv, this.gridOptions, gridParams);\n\n        this.api = this.gridOptions.api!;\n        this.columnApi = this.gridOptions.columnApi!;\n    }\n\n    waitForInstance(reactComponent: ReactComponent, resolve: (value: any) => void, runningTime = 0) {\n        // if the grid has been destroyed in the meantime just resolve\n        if (this.destroyed) {\n            resolve(null);\n            return;\n        }\n\n        if (reactComponent.rendered()) {\n            resolve(null);\n        } else {\n            if (runningTime >= AgGridReact.MAX_COMPONENT_CREATION_TIME) {\n                console.error(`ag-Grid: React Component '${reactComponent.getReactComponentName()}' not created within ${AgGridReact.MAX_COMPONENT_CREATION_TIME}ms`);\n                return;\n            }\n            window.setTimeout(() => this.waitForInstance(reactComponent, resolve, runningTime + 5), 5);\n        }\n    }\n\n    /**\n     * Mounts a react portal for components registered under the componentFramework.\n     * We do this because we want all portals to be in the same tree - in order to get\n     * Context to work properly.\n     */\n    mountReactPortal(portal: ReactPortal, reactComponent: ReactComponent, resolve: (value: any) => void) {\n        this.portals = [...this.portals, portal];\n        this.batchUpdate(this.waitForInstance(reactComponent, resolve));\n    }\n\n    batchUpdate(callback?: any) {\n        if (this.hasPendingPortalUpdate) {\n            return callback && callback();\n        }\n        setTimeout(() => {\n            if (this.api) { // destroyed?\n                this.forceUpdate(() => {\n                    callback && callback();\n                    this.hasPendingPortalUpdate = false;\n                });\n            }\n        });\n        this.hasPendingPortalUpdate = true;\n    }\n\n\n    destroyPortal(portal: ReactPortal) {\n        this.portals = this.portals.filter(curPortal => curPortal !== portal);\n        this.batchUpdate();\n    }\n\n    private getStrategyTypeForProp(propKey: string) {\n        if (propKey === 'rowData') {\n            // for row data we either return the supplied strategy, or:\n            // if deltaRowDataMode/immutableData we default to IdentityChecks,\n            // if not we default to DeepValueChecks (with the rest of the properties)\n            if (!!this.props.rowDataChangeDetectionStrategy) {\n                return this.props.rowDataChangeDetectionStrategy;\n            } else if (this.props['deltaRowDataMode'] || this.props['immutableData']) {\n                return ChangeDetectionStrategyType.IdentityCheck;\n            }\n        }\n\n        // all non row data properties will default to DeepValueCheck\n        return ChangeDetectionStrategyType.DeepValueCheck;\n    }\n\n    shouldComponentUpdate(nextProps: any) {\n        this.processPropsChanges(this.props, nextProps);\n\n        // we want full control of the dom, as ag-Grid doesn't use React internally,\n        // so for performance reasons we tell React we don't need render called after\n        // property changes.\n        return false;\n    }\n\n    componentDidUpdate(prevProps: any) {\n        this.processPropsChanges(prevProps, this.props);\n    }\n\n    processPropsChanges(prevProps: any, nextProps: any) {\n        const changes = <any>{};\n\n        this.extractGridPropertyChanges(prevProps, nextProps, changes);\n        this.extractDeclarativeColDefChanges(nextProps, changes);\n\n        if (Object.keys(changes).length > 0) {\n            ComponentUtil.processOnChange(changes, this.gridOptions, this.api!, this.columnApi);\n        }\n    }\n\n    private extractDeclarativeColDefChanges(nextProps: any, changes: any) {\n        let debugLogging = !!nextProps.debug;\n\n        if (AgGridColumn.hasChildColumns(nextProps)) {\n            const detectionStrategy = this.changeDetectionService.getStrategy(ChangeDetectionStrategyType.DeepValueCheck);\n\n            const currentColDefs = this.gridOptions.columnDefs;\n            const newColDefs = AgGridColumn.mapChildColumnDefs(nextProps);\n            if (!detectionStrategy.areEqual(currentColDefs, newColDefs)) {\n                if (debugLogging) {\n                    console.log(`agGridReact: colDefs definitions changed`);\n                }\n\n                changes['columnDefs'] =\n                    {\n                        previousValue: this.gridOptions.columnDefs,\n                        currentValue: AgGridColumn.mapChildColumnDefs(nextProps)\n                    }\n            }\n        }\n    }\n\n    private extractGridPropertyChanges(prevProps: any, nextProps: any, changes: any) {\n        let debugLogging = !!nextProps.debug;\n\n        const changedKeys = Object.keys(nextProps);\n        changedKeys.forEach((propKey) => {\n            if (ComponentUtil.ALL_PROPERTIES.indexOf(propKey) !== -1) {\n                const changeDetectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n                if (!changeDetectionStrategy.areEqual(prevProps[propKey], nextProps[propKey])) {\n                    if (debugLogging) {\n                        console.log(`agGridReact: [${propKey}] property changed`);\n                    }\n\n                    changes[propKey] = {\n                        previousValue: prevProps[propKey],\n                        currentValue: nextProps[propKey]\n                    };\n                }\n            }\n        });\n        ComponentUtil.getEventCallbacks().forEach((funcName: string) => {\n            if (this.props[funcName] !== nextProps[funcName]) {\n                if (debugLogging) {\n                    console.log(`agGridReact: [${funcName}] event callback changed`);\n                }\n                changes[funcName] = {\n                    previousValue: prevProps[funcName],\n                    currentValue: nextProps[funcName]\n                };\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        if (this.api) {\n            this.api.destroy();\n            this.api = null;\n        }\n        this.destroyed = true;\n    }\n\n    public isDisableStaticMarkup(): boolean {\n        return !!this.props.disableStaticMarkup;\n    }\n}\n\nAgGridReact.propTypes = {\n    gridOptions: PropTypes.object\n};\n\naddProperties(ComponentUtil.getEventCallbacks(), PropTypes.func);\naddProperties(ComponentUtil.BOOLEAN_PROPERTIES, PropTypes.bool);\naddProperties(ComponentUtil.STRING_PROPERTIES, PropTypes.string);\naddProperties(ComponentUtil.OBJECT_PROPERTIES, PropTypes.object);\naddProperties(ComponentUtil.ARRAY_PROPERTIES, PropTypes.array);\naddProperties(ComponentUtil.NUMBER_PROPERTIES, PropTypes.number);\naddProperties(ComponentUtil.FUNCTION_PROPERTIES, PropTypes.func);\n\nfunction addProperties(listOfProps: string[], propType: any) {\n    listOfProps.forEach((propKey: string) => {\n        (AgGridReact as any)[propKey] = propType;\n    });\n}\n\nclass ReactFrameworkComponentWrapper extends BaseComponentWrapper<WrapableInterface> implements FrameworkComponentWrapper {\n\n    private readonly agGridReact!: AgGridReact;\n\n    constructor(agGridReact: AgGridReact) {\n        super();\n        this.agGridReact = agGridReact;\n    }\n\n    createWrapper(UserReactComponent: { new(): any }, componentType: ComponentType): WrapableInterface {\n        return new ReactComponent(UserReactComponent, this.agGridReact, componentType);\n    }\n}\n"]}